import React, { useContext, useEffect, useState } from "react";
import { useMedia } from "./StreamProvider";

interface HostProviderProps {
  children: React.ReactNode;
}

interface Participant {
  peerId: string;
  peerName: string;
  status: "accepted" | "pending";
  pc?: RTCPeerConnection | null;
  stream?: MediaStream | null;
}

interface HostContextType {
  isHost: boolean;
  hostName: string | null;
  hostEmail: string | null;
  sessionId: string | null;
  hostWs: WebSocket | null;
  participants: Participant[];
  createMeeting: (
    sessionId: string,
    hostName: string,
    hostEmail: string,
    ws: WebSocket
  ) => void;
  handleParticipantJoinRequest: (peerId: string, peerName: string) => void;
  acceptParticipant: (peerId: string) => void;
  removeAndUpdateParticipant: (peerId: string) => void;
}

const HostContext = React.createContext<HostContextType | null>(null);

export const HostProvider = ({ children }: HostProviderProps) => {
  const [isHost, setIsHost] = useState<boolean>(false);
  const [hostName, setHostName] = useState<string | null>(null);
  const [hostEmail, setHostEmail] = useState<string | null>(null);
  const [sessionId, setSessionId] = useState<string | null>(null);
  const [hostWs, setHostWs] = useState<WebSocket | null>(null);
  const [participants, setParticipants] = useState<Participant[]>([]);
  const { localStream } = useMedia();

  const createMeeting = (
    sessionId: string,
    hostName: string,
    hostEmail: string,
    ws: WebSocket
  ) => {
    setIsHost(true);
    setSessionId(sessionId);
    setHostName(hostName);
    setHostEmail(hostEmail);
    setHostWs(ws);
  };

  const handleParticipantJoinRequest = (peerId: string, peerName: string) => {
    setParticipants((prev) => [
      ...prev,
      { peerId, peerName, status: "pending", pc: null, stream: null },
    ]);
  };


  const acceptParticipant = async (peerId: string) => {
    const pc = new RTCPeerConnection();
    const participant = participants.find(p => p.peerId === peerId);

    if (participant) {
      try {
        const offer = await pc.createOffer();
        await pc.setLocalDescription(offer);
        console.log("Sending participant accepted and sdp to participant");
        console.log(pc.localDescription);
        hostWs?.send(JSON.stringify({ type: 'participant-added', peerId, sessionId, sdp: offer.sdp }))

        if (localStream) {
          console.log("Sending the host stream")
          localStream.getTracks().forEach(track => {
            pc.addTrack(track, localStream);
          })
        }

        setParticipants(prevParticipants =>
          prevParticipants.map(participant =>
            participant.peerId === peerId ? { ...participant, status: 'accepted', pc } : participant
          )
        );

        pc.onicecandidate = event => {
          if (event.candidate) {
            console.log("Sending Ice candidate to participant")
            hostWs?.send(JSON.stringify({ type: 'ice-candidate', peerId, sessionId, candidate: event.candidate }))
          }
        };

        pc.ontrack = event => {
          console.log("Receiving participant stream")
          setParticipants(prevParticipants =>
            prevParticipants.map(participant =>
              participant.peerId === peerId ? { ...participant, stream: event.streams[0] } : participant
            )
          )
        };
      }

      catch (err) {
        console.log(err);
      }
    }
  };

  const removeAndUpdateParticipant = (peerId: string) => {
    setParticipants((prevParticipants) =>
      prevParticipants.filter((p) => p.peerId !== peerId)
    );

    hostWs?.send(
      JSON.stringify({ type: "participant-rejected", peerId, sessionId })
    );
  };

  useEffect(() => {
    if (!hostWs) return;

    hostWs.onopen = () => {
      console.log("Host Websocket connection opened");
    };

    hostWs.onmessage = (event) => {
      const message = JSON.parse(event.data);

      switch (message.type) {
        case "join-request": {
          const { peerId, peerName } = message;
          handleParticipantJoinRequest(peerId, peerName);
          console.log(participants);
          break;
        }

        case 'answer': {
          console.log("Host received answer from participant");
          const { peerId, sdp } = message;
          const participant = participants.find(p => p.peerId === peerId);
          if (participant && participant.pc) {
            participant.pc.setRemoteDescription(new RTCSessionDescription({type: 'answer', sdp}))
          }
          break;
        }
          
        case 'participant-rejected':{
          const { peerId } = message;
          removeAndUpdateParticipant(peerId);
          break;
          }

        default:
          console.warn("Unhandled message type:", message.type);
      }
    };

    hostWs.onclose = () => {
      console.log("Peer WebSocket connection closed");
    };
    
  }, [hostWs, participants]);

  const value = {
    isHost,
    hostName,
    hostEmail,
    sessionId,
    hostWs,
    participants,
    createMeeting,
    handleParticipantJoinRequest,
    acceptParticipant,
    removeAndUpdateParticipant,
  };
  return <HostContext.Provider value={value}>{children}</HostContext.Provider>;
};

export const useHost = () => {
  const context = useContext(HostContext);
  if (!context) {
    throw new Error("useHost must be used within a HostProvider");
  }
  return context;
};
