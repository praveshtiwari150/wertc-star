import React, { useContext, useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useMedia } from './StreamProvider';

interface PeerProviderProps {
  children: React.ReactNode;
}

interface PeerContextType {
  peerId: string | null;
  peerName: string | null;
  sessionId: string | null;
  status: 'accepted' | 'rejected' | 'pending' | 'invalid' |null;
  peerSocket: WebSocket | null;
  pc: RTCPeerConnection | null;
  hostStream: MediaStream | null;
  sendJoinRequest: (name: string, sessionId: string, ws: WebSocket) => void;
}

const PeerContext = React.createContext<PeerContextType | null>(null);
export const PeerProvider = ({ children }: PeerProviderProps) => {
  const [peerId, setPeerId] = useState<string | null>(null);
  const [peerName, setPeerName] = useState<string | null>(null);
  const [sessionId, setSessionId] = useState<string | null>(null);
  const [status, setStatus] = useState<'accepted' | 'rejected' | 'pending' | 'invalid' | null>(null);
  const [peerSocket, setpeerSocket] = useState<WebSocket | null>(null);
  const [pc, setPc] = useState<RTCPeerConnection | null>(null);
  const navigate = useNavigate();
  const [hostStream, setHostStream] = useState<MediaStream | null>(null);
  const { localStream } = useMedia();

  const sendStream = async (pc: RTCPeerConnection, stream: MediaStream) => {
    try {
      if (!stream || !pc) return;
      stream.getTracks().forEach((track) => {
        pc.addTrack(track, stream);
      });
    } catch (err) {
      console.log("Error while sending stream", err);
    }
  };

  const sendJoinRequest = (name: string, sessionId: string, ws: WebSocket) => {
    setpeerSocket(ws);
    setSessionId(sessionId);
    setPeerName(name);
    setStatus('pending');
    
    ws.onopen = () => {
      console.log("Participant Websocket connection opened and sent join request to host")
      ws.send(
        JSON.stringify({ type: "join-meeting", peerName: name, sessionId })
      );
      navigate(`/approval/${sessionId}`);
    };

    ws.onmessage = (event) => {
      const message = JSON.parse(event.data);
      switch (message.type) {
        case "participant-added":
          handleParticipantAdded(message)
          break;
        
        case "ice-candidate":
          handleIceCandidate(message);
          break;
        
        case "participant-rejected":
          setStatus("rejected");
          break;
      }
    }
  }


  const handleParticipantAdded = async (message: any) => {
    const { peerId, sdp } = message;
    const pc = new RTCPeerConnection();
    setPc(pc);
    setPeerId(peerId);
    setStatus("accepted");

    pc.onicecandidate = event => {
      if (event.candidate) {
        console.log("Sending ice candidate to the host")
        console.log(event.candidate)
        peerSocket?.send(JSON.stringify({ type: 'ice-candidate', sessionId, peerId, candidate: event.candidate }));
      }

      else {
        console.log('Ice candidate is missing');
      }
    }

    pc.ontrack = event => {
      console.log("Receiving host stream")
      setHostStream(event.streams[0]);
    };

    console.log("Storing the offer")
    await pc.setRemoteDescription(new RTCSessionDescription({ type: 'offer', sdp }));
    console.log("Host offer", pc.remoteDescription)
    console.log("Creating Answer");
    const answer = await pc.createAnswer();
    await pc.setLocalDescription(answer);
    console.log("Sending answer to the host");
    peerSocket?.send(JSON.stringify({type: 'answer',sessionId, peerId,sdp: pc.localDescription?.sdp}))
    

    localStream?.getTracks().forEach(track => {
      console.log("Sneding participant stream");
      pc.addTrack(track, localStream);
    })
  };

  const handleIceCandidate = (message: any) => {
    console.log("Host sent an ice candidate");
    const { candidate } = message;
    console.log(candidate)
    pc?.addIceCandidate(new RTCIceCandidate(candidate));
  }


  const value = {peerId, peerName, sessionId,status, peerSocket, pc,hostStream,sendJoinRequest}
  return (
    <PeerContext.Provider value={value}>
      {children}
    </PeerContext.Provider>
  )
}

export const usePeer = () => {
  const context = useContext(PeerContext);
  if (!context) {
    throw new Error("usePeer must be used within a PeerProvider");
  }
  return context;
};