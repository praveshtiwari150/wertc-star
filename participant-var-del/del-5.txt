import React, { useContext, useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { useMedia } from "./StreamProvider";

interface PeerProviderProps {
  children: React.ReactNode;
}

interface PeerContextType {
  peerId: string | null;
  peerName: string | null;
  sessionId: string | null;
  status: "accepted" | "rejected" | "pending" | "invalid" | null;
  peerSocket: WebSocket | null;
  pc: RTCPeerConnection | null;
  hostStream: MediaStream | null;
  sendJoinRequest: (name: string, sessionId: string, ws: WebSocket) => void;
}

const PeerContext = React.createContext<PeerContextType | null>(null);

export const PeerProvider = ({ children }: PeerProviderProps) => {
  const [peerId, setPeerId] = useState<string | null>(null);
  const [peerName, setPeerName] = useState<string | null>(null);
  const [sessionId, setSessionId] = useState<string | null>(null);
  const [status, setStatus] = useState<
    "accepted" | "rejected" | "pending" | "invalid" | null
  >(null);
  const [peerSocket, setpeerSocket] = useState<WebSocket | null>(null);
  const [pc, setPc] = useState<RTCPeerConnection | null>(null);
  const navigate = useNavigate();
  const [hostStream, setHostStream] = useState<MediaStream | null>(null);
  const { localStream } = useMedia();

  const sendJoinRequest = (name: string, sessionId: string, ws: WebSocket) => {
    setpeerSocket(ws);
    setSessionId(sessionId);
    setPeerName(name);
    setStatus("pending");

    ws.onopen = () => {
      console.log(
        "1 Participant WebSocket connection opened and sent join request to host"
      );
      ws.send(
        JSON.stringify({ type: "join-meeting", peerName: name, sessionId })
      );
      navigate(`/approval/${sessionId}`);
    };
  };

  const handleParticipantAdded = async (message: any) => {
    console.log("1 Participant accepted got to know");
    const { peerId, sdp } = message;
    const pc = new RTCPeerConnection();
    setPc(pc);
    setPeerId(peerId);
    setStatus("accepted");

    try {
      console.log("2 Storing the offer");
      await pc.setRemoteDescription(
        new RTCSessionDescription({ type: "offer", sdp })
      );
      console.log("3 Host offer", pc.remoteDescription);
      console.log("4 Creating Answer");
      const answer = await pc.createAnswer();
      await pc.setLocalDescription(answer);
      console.log("5 Sending answer to the host");
      peerSocket?.send(
        JSON.stringify({
          type: "answer",
          sessionId,
          peerId,
          sdp: pc.localDescription?.sdp,
        })
      );
    } catch (err) {
      console.error("Error during the participant add process:", err);
    }
  };

  const handleIceCandidate = (message: any) => {
    console.log("10 Host sent an ICE candidate");
    const { candidate } = message;
    console.log(candidate);
    pc?.addIceCandidate(new RTCIceCandidate(candidate))
      .then(() => {
        console.log("ICE candidate added successfully");
      })
      .catch((error) => {
        console.error("Error adding received ICE candidate", error);
      });
  };

  useEffect(() => {

    if (pc) {
      pc.onicecandidate = (event) => {
        if (event.candidate) {
          console.log("6 Sending ICE candidate to the host");
          console.log(event.candidate);
          peerSocket?.send(
            JSON.stringify({
              type: "ice-candidate",
              sessionId,
              peerId,
              candidate: event.candidate,
            })
          );
        } else {
          console.log("7 ICE gathering complete");
        }
      };

      pc.ontrack = (event) => {
        console.log("8 Receiving host stream");
        setHostStream(event.streams[0]);
      };

      localStream?.getTracks().forEach((track) => {
        console.log("9 Sending participant stream");
        pc.addTrack(track, localStream);
      });
    }
  }, [pc]);

  useEffect(() => {
    if (!peerSocket) return;

    peerSocket.onmessage = (event) => {
      const message = JSON.parse(event.data);
      console.log("received a message from signalling server ", message);
      switch (message.type) {
        case "participant-added":
          handleParticipantAdded(message);
          break;
        case "ice-candidate":
          handleIceCandidate(message);
          break;
        case "participant-rejected":
          setStatus("rejected");
          break;
        default:
          console.warn("Unhandled message type:", message.type);
      }
    };
  }, [peerSocket]);

  const value = {
    peerId,
    peerName,
    sessionId,
    status,
    peerSocket,
    pc,
    hostStream,
    sendJoinRequest,
  };

  return <PeerContext.Provider value={value}>{children}</PeerContext.Provider>;
};

export const usePeer = () => {
  const context = useContext(PeerContext);
  if (!context) {
    throw new Error("usePeer must be used within a PeerProvider");
  }
  return context;
};
